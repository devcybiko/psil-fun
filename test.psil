3 a =
5 b =
a$ b$ + peek 
8 == assert

`this is a
test` print

`a` $
( + ) sum =
5 6 sum$$ peek
11 == assert

0 ( 1 2 3 4 ) sum$ reduce peek
10 == assert

( 1 2 3 4 ) car peek
1 == assert

( 1 2 3 4 ) cdr peek 
... 
4 == assert
3 == assert
2 == assert

( 1 2 3 4 ) save =

save$ car
1 == assert

save$ cdr
... 
4 == assert
3 == assert
2 == assert

save$ 2 head peek
...
2 == assert
1 == assert
 
save$ 2 tail peek
...
4 == assert
3 == assert
 
`a` `b` swap
`a` == assert
`b` == assert


( 1 2 ( `x` `y` ) 3 4 ) 2 get cdr peek
...
`y` == assert 

( 1 2 3 4 5 6 ) ... 5 nlist swap pop
( 2 3 4 5 6 ) == assert

1 2 + 3 == assert
2 3 - 0 1 - == assert
4 5 * 20 == assert
6 7 / int 0 == assert
10 3 / int 3 == assert
10 3 // 3 == assert
10 3 % 1 == assert

( 1 2 3 4 5 ) ( a = a$ a$ * ) map 0 swap ( + ) reduce
55 == assert

30 foo =
45 bar =
foo--
bar++
foo$ 29 == assert
bar$ 46 == assert

45 foo =
( foo$ print foo -- foo$ 0 >= ) while
foo$ 0 1 - == assert

( 1 2 3 4 5) ( 2 * ) each
5 nlist (2 4 6 8 10)  == assert

`foo` xxx =
xxx$$ 0 1 - == assert

( a b ) 

dict b $


